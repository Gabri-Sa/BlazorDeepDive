@inject NavigationManager NavigationManager

@if (Server != null)
{
    <li @key="Server.ServerId" style="background-color: @GetBackgroundColor()">
        @Server.Name in @Server.City is
        <span style="color:@((Server.IsOnline ? "green" : "red"))">
            @(Server.IsOnline ? "online" : "offline")
        </span>
        &nbsp;

        @if (Server.IsOnline)
        {
            <button type="button"
                    class="btn btn-outline-danger"
                    @onclick="@(() => { Server.IsOnline = false; })">
                Turn Off
            </button>
        }
        else
        {
            <button type="button"
                    class="btn btn-outline-success"
                    @onclick="@(() => { Server.IsOnline = true; })">
                Turn On
            </button>
        }
        &nbsp;
        @if (Server.IsOnline)
        {
            Random random = new Random();
            int randomNumber = random.Next(0, 500);
            <text>@randomNumber</text>
        }
        else
        {
            <text>N/A</text>
        }

        &nbsp;
        <a href="/servers/@Server.ServerId" class="btn btn-link">Edit</a>
        &nbsp;
        <EditForm Model="Server"
                  FormName="@($"form-Server-{Server.ServerId}")"
                  OnValidSubmit="@(() => { DeleteServer(Server.ServerId); })">
            <button type="submit" class="btn btn-primary">Delete</button>
        </EditForm>

        @if (editingServer)
        {
            <ServerManagement.Components.Pages.EditServer Id="this.Server.ServerId">

            </ServerManagement.Components.Pages.EditServer>
        }
    </li>

}

@code {

    private bool editingServer = false;

    [CascadingParameter(Name = "SelectedCity")]
    public string? SelectedCity { get; set; }



    [Parameter]
    public Server? Server { get; set; }

    private void ChangeStatus()
    {
        if (Server != null)
            this.Server.IsOnline = !this.Server.IsOnline;
    }
    private void DeleteServer(int serverId)
    {
        if (serverId > 0)
        {
            ServersRepository.DeleteServer(serverId);
            NavigationManager.NavigateTo("/servers", true);
        }
    }

    private string GetBackgroundColor()
    {
        if (SelectedCity != null)
        {
            switch (this.SelectedCity)
            {
                case "Toronto": return "powderblue";
                case "Montreal": return "lightgray";
                case "Ottawa": return "palegreen";
                case "Calgary": return "pink";
                case "Halifax": return "white";
                default: return "white";
            }

        }
        else
        {
            return "white";
        }
    }
}

