@implements IDisposable

<div class="col">
    <div class="card @(selectedCity.Equals(city, StringComparison.OrdinalIgnoreCase) ? "border-primary" : "")">
        <img src="@($"/images/{city}.png")"
             class="card-img-top" alt="...">
        <div class="card-body">
            <button type="button"
                    class="btn btn-primary"
                    @onclick="@(() => { SelectCity(city); })">
                @city
            </button>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string selectedCity { get; set; } = "Toronto";

    [Parameter]
    public string city { get; set; } = "";

    [Parameter]
    public EventCallback<string> SelectCityCallback { get; set; }

    private void SelectCity(string cityName)
    {
      SelectCityCallback.InvokeAsync(cityName);
    }

    protected override bool ShouldRender()
    {
        var guid = Guid.NewGuid();
        Console.WriteLine($"{this.GetType().Name}: {nameof(ShouldRender)} : {guid}");

        return base.ShouldRender();
    }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        var guid = Guid.NewGuid();
        Console.WriteLine($"{this.GetType().Name}: {nameof(SetParametersAsync)}:{guid}");

        return base.SetParametersAsync(parameters);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        var guid = Guid.NewGuid();
        Console.WriteLine($"{this.GetType().Name}: {nameof(OnInitialized)} : {guid}");
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        var guid = Guid.NewGuid();
        Console.WriteLine($"{this.GetType().Name}: {nameof(OnParametersSet)} : {guid}");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        var guid = Guid.NewGuid();
        Console.WriteLine($"{this.GetType().Name}: {nameof(OnAfterRender)}: {guid}");
    }

    public void ClearSelection()
    {
        this.selectedCity = string.Empty;
    }

    private void HandleCitySelection(string cityName)
    {
        selectedCity = cityName;

        SelectCityCallback.InvokeAsync(cityName);
    }

    public void Dispose()
    {
        var guid = Guid.NewGuid();
        Console.WriteLine($"{this.GetType().Name}: {nameof(Dispose)} : {guid}");
    }
}