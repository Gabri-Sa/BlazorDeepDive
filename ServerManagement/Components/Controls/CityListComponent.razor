@implements IDisposable

@if (cities != null && cities.Count > 0)
{
    <div class="container-fluid text-center">
        <div class="row w-40">
            @foreach (var city in cities)
            {
                <CityComponent city="@city"
                               selectedCity="@selectedCity"
                               SelectCityCallback="HandleCitySelection">
                </CityComponent>
            }
        </div>
    </div>
}

@code {

    [Parameter]
    public EventCallback<string> SelectCityCallback { get; set; }

    private string selectedCity = "Toronto";

    private List<String>? cities;

    private void HandleCitySelection(string cityName)
    {
        selectedCity = cityName;

        SelectCityCallback.InvokeAsync(cityName);
    }

    protected override bool ShouldRender()
    {
        var guid = Guid.NewGuid();
        Console.WriteLine($"{this.GetType().Name}: {nameof(ShouldRender)} : {guid}");

        return base.ShouldRender();
    }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        var guid = Guid.NewGuid();
        Console.WriteLine($"{this.GetType().Name}: {nameof(SetParametersAsync)}:{guid}");

        return base.SetParametersAsync(parameters);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        var guid = Guid.NewGuid();
        Console.WriteLine($"{this.GetType().Name}: {nameof(OnInitialized)} : {guid}");

        cities ??= CitiesRepository.GetCities();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        var guid = Guid.NewGuid();
        Console.WriteLine($"{this.GetType().Name}: {nameof(OnParametersSet)} : {guid}");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        var guid = Guid.NewGuid();
        Console.WriteLine($"{this.GetType().Name}: {nameof(OnAfterRender)}: {guid}");
    }

    public void ClearSelection()
    {
        this.selectedCity = string.Empty;
    }

    public void Dispose()
    {
        var guid = Guid.NewGuid();
        Console.WriteLine($"{this.GetType().Name}: {nameof(Dispose)} : {guid}");
    }
}